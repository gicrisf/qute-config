#+title: qutebrowser configuration
#+author: Giovanni Crisalfi
#+date: 2022-12-03 sab 22:02
#+hugo_base_dir: ~/zwitterio-it/
#+hugo_section: software/qute-config
#+export_file_name: index.en.md
#+hugo_tags: vim qt python
#+hugo_categories: software
#+STARTUP: show2levels
#+MACRO: more @@html:<!-- more -->@@

#+begin_quote
qutebrowser is a keyboard-focused browser with a minimal GUI. It’s based on Python and Qt and free software, licensed under the GPL.
#+end_quote

{{{more}}}

It's said "cute browser", because it's actually cute, yes, but mostly because that's how Qt itself is pronounced. *Stay and enjoy the quteness*.

#+begin_quote
Wait, but isn't Python /ToO sLoW/ for a browser?
#+end_quote

*No.*

* Globals
[[https://www.qutebrowser.org/doc/help/configuring.html][From the docs]]:

#+begin_quote
For more powerful configuration possibilities, you can create a =config.py= file. Since it’s a Python file, you have much more flexibility for configuration. Note that qutebrowser will never touch this file - this means you’ll be responsible for updating it when upgrading to a newer qutebrowser version.
#+end_quote

Going further in this literate configuration, I will cite the docs a lot more.

#+begin_quote
Two global objects are pre-defined when running =config.py=: c and config.
#+end_quote

So, let's start from them:

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
config = config  # type: ConfigAPI
c = c  # type: ConfigContainer
#+end_src

This isn't enough, because we must tell qutebrowser if we want to load autoconfig or not. If we forgot this, qutebrowser will throw this error:

#+begin_quote
autoconfig loading not specified: Your config.py should call either `config.load_autoconfig()` (to load settings configured via the GUI) or `config.load_autoconfig(False)` (to not do so)
#+end_quote

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)
#+end_src

#+begin_quote
See the [[https://www.qutebrowser.org/doc/help/settings.html][settings help page]] for all available settings.
#+end_quote

* Fonts
#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Default font families to use.
c.fonts.default_family = "Noto Sans Mono"

# Default font size to use.
# c.fonts.default_size = "11pt"
#+end_src

* Cookies
#+begin_quote
Which cookies to accept.
#+end_quote

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'no-3rdparty', 'chrome-devtools://*')
#+end_src

* Dark mode
Basically, this inverts color pages.

# :tangle ~/.config/qutebrowser/config.py
#+begin_src python :noweb no-export
config.set("colors.webpage.darkmode.enabled", True)
#+end_src

I don't tangle this anymore, because I think it's too annoying.

* Keybindings
** Emacs-y launcher (a basic example)
#+begin_quote
While it’s possible to change the =bindings.commands= setting to customize the keyboard shortcuts, it’s preferred to use the =config.bind= command. Doing so ensures the commands are valid and normalizes different expressions which map to the same key.
#+end_quote

First of all, I want an emacs-like binding to launch commands.

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Emacs-y way to launch commands
config.bind('<Alt-x>', 'set-cmd-text :')
#+end_src

Why using an emacs-like binding with a vi-like configuration, you might say. It's a good question, but the answer is really simple: I'm an Evil Emacs user and I live on the great Doom Emacs distribution, so I'm used to a (IMO) optimal blending of both the styles with some "space spice" on them. Like Spacemacs, Doom Emacs promotes the use of the space key for launching a lot of commands. I wish I could try to emulate this behaviour in this qutebrowser config too.

** Space sequences
# This isn't easy as I hoped, because the leading key isn't really something qutebrowser expects.
# The keybindings aren't thought to be sequential, like they are on Spacemacs.

My keybindings turn around *<Space>*.

Since I falled in space-centered key settings when I first installed Spacemacs, I'll let them teach why =<Space>= is so comfortable. From Spacemacs' docs:

#+begin_quote
[[https://develop.spacemacs.org/doc/BEGINNERS_TUTORIAL.html][The power of Spacemacs lies in its efficient key bindings.]]

[...]

Because the spacebar is the most accessible key on the keyboard and is pressed by the strongest fingers (the thumbs), it is a natural choice for launching commands. You can think of it as the start menu of Spacemacs.
#+end_quote

Of course, I don't demand having =<Space>= as an entry point for a qutebrowser's "start menu": just being able to launch my usual sequences would be enough.
From qutebrowser docs:

#+begin_quote
To bind keys without modifiers, specify a key chain to bind as a string.
#+end_quote

By exploring the docs, I found out that in the language of qutebrowser, *sequences are called /keychains/*.
When a key is linked to more keychains, qutebrowser shows the so called "keyhint", which is a little cheatsheet on the side of your screen.
It's not like having a full functional buffer popping up everytime you need it like in Spacemacs or Doom Emacs, but it's pretty similar for our purpose!

A typical keychain looks like this one:

#+begin_quote
=Sq=: bookmark-list
#+end_quote

*Watch out!*: keychains are made by writing the keys all linked together, without spaces.

If keychains are possible with the letter "g" or "k", why shouldn't be possible with "Space", right?
Well, not exactly, because "Space" is a modifier, just like "Alt" or "Ctrl", so it could be harder.
Florian Bruhin, aka The-Compiler, who is qutebrowser's primary maintainer, talked about this topic in [[https://github.com/qutebrowser/qutebrowser/issues/319][this GitHub issue]] (discovered through [[https://www.reddit.com/r/qutebrowser/comments/6gvh7e/keychains_with_modifiers/][this reddit post]]).
Luckily for me, the problem was solved with a [[https://github.com/qutebrowser/qutebrowser/pull/3647][proper key handling refactoring of 2018]] (thanks, Florian, this is really appreciated).
Right now, chaining modifiers and letters is /that/ easy.

So, stopping all the chit-chat, how do we set a keychain/sequence with the space modifier?

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Opening new pages like I open new files.
config.bind('<Space>ff', 'set-cmd-text -s :open')
#+end_src

Pretty simple, right?:

Since we're going to use =<Space>= a lot, it's better to unbind the =<Space>= key from its use in caret mode. You know, it shouldn't be a problem, but it's better to be careful.

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Selection toggle is already taken by `v`, so I can free the spacebar
config.unbind('<Space>', mode="caret")
#+end_src

More space-keychains from here on.

*** History and bookmarks
#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Go back in the history of the current tab.
# (like kill buffer, because usually this fall back to the previous buffer)
config.bind('<Space>bk', 'back')

# Show all bookmarks/quickmarks
config.unbind('Sb') # --jump
config.unbind('Sq') # no jump; what the hell is this jump flag anyway?
config.bind('<Space><Return>', 'bookmark-list --jump')

# Show browsing history
config.unbind('Sh')
config.bind('<Space>h', 'history')
#+end_src

*** Settings
#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Set an option
config.unbind('Ss')
config.bind('<Space>ss', 'set')
#+end_src

*** Macros
#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Start or stop recording a macro
# This isn't really evilish, I just prefer it this way because I happen to press q
config.unbind('q')
config.bind('<Space>q', 'macro-record')
#+end_src

*** Tabs
#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# Duplicate the current tab
config.unbind('gC')
# (like buffer clone)
config.bind('<Space>bc', 'tab-clone')

# Select tab by index or url/title best match
config.unbind('gt')
# (like ibuffer)
config.bind('<Space>bi', 'tab-select')

# Close the current/[count]th tab
config.unbind('d')
# (like kill buffer)
config.bind('<Space>bd', 'tab-close')

# Switch to the next tab
config.unbind('J')
# (like next buffer)
config.bind('<Space>bn', 'tab-next')

# Switch to the previous tab
config.unbind('K')
# (like previous buffer)
config.bind('<Space>bp', 'tab-next')

# Close all tabs except for the current one
config.unbind('co')
# (like kill buried buffers)
config.bind('<Space>bZ', 'tab-only')

# Pin/unpin the current/[count]th tab
config.unbind('<Ctrl-p>')
# (like "buffer pin")
config.bind('<Space>bp', 'tab-pin')

# Select the tab given as argument/[count]
config.unbind('T')
# (like "buffer tabs...")
config.bind('<Space>t', 'set-cmd-text -sr :tab-focus')
#+end_src

I'll keep adding Space keychains in other section of this file too.

** Vim-like navigation in command mode
#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
config.bind('<Ctrl-j>', 'completion-item-focus --history next', mode="command")
config.bind('<Ctrl-k>', 'completion-item-focus --history prev', mode="command")
#+end_src

** Paste like in a terminal emulator :noexport:
I'm used to paste strings with =<Ctrl-Shift> v=, so let's teach that to qutebrowser.

# :tangle ~/.config/qutebrowser/config.py
#+begin_src python :noweb no-export
config.bind('<Ctrl-Shift> v', 'fake-key -g <Ctrl-v>')
#+end_src

This is a system-wide keybinding that qutebrowser inherit from Qt, so we can [[https://www.reddit.com/r/qutebrowser/comments/j2vykm/comment/g7ba3bs/?utm_source=share&utm_medium=web2x&context=3][emulate the behaviour]] by simulating actual =<Ctrl-v>=.

/*Not tangled, it doesn't work*/

* Colors

Choosing among the available ones, select the desired colorscheme and template here:

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
<<colorscheme-city-lights>>

<<my-base16-template>>
#+end_src

** base16 Template by tinted-theming
This template is taken from [[https://github.com/tinted-theming/base16-qutebrowser][a repository meant to work with base16]].

#+begin_quote
It provides a simple template that can be used with the base16 color schemes to generate a functional config file for qutebrowser.
#+end_quote

#+name: tinted-base16-template
#+begin_src python
# set qutebrowser colors

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
c.colors.completion.fg = base05

# Background color of the completion widget for odd rows.
c.colors.completion.odd.bg = base01

# Background color of the completion widget for even rows.
c.colors.completion.even.bg = base00

# Foreground color of completion widget category headers.
c.colors.completion.category.fg = base0A

# Background color of the completion widget category headers.
c.colors.completion.category.bg = base00

# Top border color of the completion widget category headers.
c.colors.completion.category.border.top = base00

# Bottom border color of the completion widget category headers.
c.colors.completion.category.border.bottom = base00

# Foreground color of the selected completion item.
c.colors.completion.item.selected.fg = base05

# Background color of the selected completion item.
c.colors.completion.item.selected.bg = base02

# Top border color of the selected completion item.
c.colors.completion.item.selected.border.top = base02

# Bottom border color of the selected completion item.
c.colors.completion.item.selected.border.bottom = base02

# Foreground color of the matched text in the selected completion item.
c.colors.completion.item.selected.match.fg = base0B

# Foreground color of the matched text in the completion.
c.colors.completion.match.fg = base0B

# Color of the scrollbar handle in the completion view.
c.colors.completion.scrollbar.fg = base05

# Color of the scrollbar in the completion view.
c.colors.completion.scrollbar.bg = base00

# Background color of disabled items in the context menu.
c.colors.contextmenu.disabled.bg = base01

# Foreground color of disabled items in the context menu.
c.colors.contextmenu.disabled.fg = base04

# Background color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.bg = base00

# Foreground color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.fg =  base05

# Background color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.bg = base02

#Foreground color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.fg = base05

# Background color for the download bar.
c.colors.downloads.bar.bg = base00

# Color gradient start for download text.
c.colors.downloads.start.fg = base00

# Color gradient start for download backgrounds.
c.colors.downloads.start.bg = base0D

# Color gradient end for download text.
c.colors.downloads.stop.fg = base00

# Color gradient stop for download backgrounds.
c.colors.downloads.stop.bg = base0C

# Foreground color for downloads with errors.
c.colors.downloads.error.fg = base08

# Font color for hints.
c.colors.hints.fg = base00

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
c.colors.hints.bg = base0A

# Font color for the matched part of hints.
c.colors.hints.match.fg = base05

# Text color for the keyhint widget.
c.colors.keyhint.fg = base05

# Highlight color for keys to complete the current keychain.
c.colors.keyhint.suffix.fg = base05

# Background color of the keyhint widget.
c.colors.keyhint.bg = base00

# Foreground color of an error message.
c.colors.messages.error.fg = base00

# Background color of an error message.
c.colors.messages.error.bg = base08

# Border color of an error message.
c.colors.messages.error.border = base08

# Foreground color of a warning message.
c.colors.messages.warning.fg = base00

# Background color of a warning message.
c.colors.messages.warning.bg = base0E

# Border color of a warning message.
c.colors.messages.warning.border = base0E

# Foreground color of an info message.
c.colors.messages.info.fg = base05

# Background color of an info message.
c.colors.messages.info.bg = base00

# Border color of an info message.
c.colors.messages.info.border = base00

# Foreground color for prompts.
c.colors.prompts.fg = base05

# Border used around UI elements in prompts.
c.colors.prompts.border = base00

# Background color for prompts.
c.colors.prompts.bg = base00

# Background color for the selected item in filename prompts.
c.colors.prompts.selected.bg = base02

# Foreground color for the selected item in filename prompts.
c.colors.prompts.selected.fg = base05

# Foreground color of the statusbar.
c.colors.statusbar.normal.fg = base0B

# Background color of the statusbar.
c.colors.statusbar.normal.bg = base00

# Foreground color of the statusbar in insert mode.
c.colors.statusbar.insert.fg = base00

# Background color of the statusbar in insert mode.
c.colors.statusbar.insert.bg = base0D

# Foreground color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.fg = base00

# Background color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.bg = base0C

# Foreground color of the statusbar in private browsing mode.
c.colors.statusbar.private.fg = base00

# Background color of the statusbar in private browsing mode.
c.colors.statusbar.private.bg = base01

# Foreground color of the statusbar in command mode.
c.colors.statusbar.command.fg = base05

# Background color of the statusbar in command mode.
c.colors.statusbar.command.bg = base00

# Foreground color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.fg = base05

# Background color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.bg = base00

# Foreground color of the statusbar in caret mode.
c.colors.statusbar.caret.fg = base00

# Background color of the statusbar in caret mode.
c.colors.statusbar.caret.bg = base0E

# Foreground color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.fg = base00

# Background color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.bg = base0D

# Background color of the progress bar.
c.colors.statusbar.progress.bg = base0D

# Default foreground color of the URL in the statusbar.
c.colors.statusbar.url.fg = base05

# Foreground color of the URL in the statusbar on error.
c.colors.statusbar.url.error.fg = base08

# Foreground color of the URL in the statusbar for hovered links.
c.colors.statusbar.url.hover.fg = base05

# Foreground color of the URL in the statusbar on successful load
# (http).
c.colors.statusbar.url.success.http.fg = base0C

# Foreground color of the URL in the statusbar on successful load
# (https).
c.colors.statusbar.url.success.https.fg = base0B

# Foreground color of the URL in the statusbar when there's a warning.
c.colors.statusbar.url.warn.fg = base0E

# Background color of the tab bar.
c.colors.tabs.bar.bg = base00

# Color gradient start for the tab indicator.
c.colors.tabs.indicator.start = base0D

# Color gradient end for the tab indicator.
c.colors.tabs.indicator.stop = base0C

# Color for the tab indicator on errors.
c.colors.tabs.indicator.error = base08

# Foreground color of unselected odd tabs.
c.colors.tabs.odd.fg = base05

# Background color of unselected odd tabs.
c.colors.tabs.odd.bg = base01

# Foreground color of unselected even tabs.
c.colors.tabs.even.fg = base05

# Background color of unselected even tabs.
c.colors.tabs.even.bg = base00

# Background color of pinned unselected even tabs.
c.colors.tabs.pinned.even.bg = base0C

# Foreground color of pinned unselected even tabs.
c.colors.tabs.pinned.even.fg = base07

# Background color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.bg = base0B

# Foreground color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.fg = base07

# Background color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.bg = base02

# Foreground color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.fg = base05

# Background color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.bg = base02

# Foreground color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.fg = base05

# Foreground color of selected odd tabs.
c.colors.tabs.selected.odd.fg = base05

# Background color of selected odd tabs.
c.colors.tabs.selected.odd.bg = base02

# Foreground color of selected even tabs.
c.colors.tabs.selected.even.fg = base05

# Background color of selected even tabs.
c.colors.tabs.selected.even.bg = base02

# Background color for webpages if unset (or empty to use the theme's
# color).
# c.colors.webpage.bg = base00
#+end_src

** Tokyo city dark
#+name: colorscheme-tokyo-city-dark
#+begin_src python
# base16-qutebrowser (https://github.com/theova/base16-qutebrowser)
# Scheme name: Tokyo City Dark
# Scheme author: Michaël Ball
# Template author: theova
# Commentary: Tinted Theming: (https://github.com/tinted-theming)

base00 = "#171d23"
base01 = "#1d252c"
base02 = "#28323a"
base03 = "#526270"
base04 = "#b7c5d3"
base05 = "#d8e2ec"
base06 = "#f6f6f8"
base07 = "#fbfbfd"
base08 = "#f7768e"
base09 = "#ff9e64"
base0A = "#b7c5d3"
base0B = "#9ece6a"
base0C = "#89ddff"
base0D = "#7aa2f7"
base0E = "#bb9af7"
base0F = "#bb9af7"
#+end_src

Potential improvements:
- The standard green color doesn't look nice enough while in caret mode; something (the bg or the fg) should be changed.

** City lights
This could be easily converted to my present Doom Emacs theme, =doom-city-lights= (a theme inspired by Atom City Lights).

[[https://github.com/SahilKang/emacs-doom-themes/blob/master/themes/doom-city-lights-theme.el][Directly from the source]], we read:

#+begin_src lisp
;; name        default   256       16
  ((bg         '("#1D252C" nil       nil            ))
   (bg-alt     '("#181E24" nil       nil            ))
   (base0      '("#10151C" "black"   "black"        ))
   (base1      '("#171D22" "#111122" "brightblack"  ))
   (base2      '("#20282F" "#222222" "brightblack"  ))
   (base3      '("#28323B" "#223333" "brightblack"  ))
   (base4      '("#384551" "#334455" "brightblack"  ))
   (base5      '("#56697A" "#556677" "brightblack"  ))
   (base6      '("#688094" "#668899" "brightblack"  ))
   (base7      '("#7FA0B7" "#77AABB" "brightblack"  ))
   (base8      '("#9CAABB" "#99AABB" "white"        ))
   (fg-alt     '("#728CA0" "#7788AA" "brightwhite"  ))
   (fg         '("#A0B3C5" "#AABBCC" "white"        ))

   (grey        '("#41505E" "#ff6655" "red"          ))
   (red         '("#D95468" "#ff6655" "red"          ))
   (orange      '("#D98E48" "#dd8844" "brightred"    ))
   (green       '("#8BD49C" "#99bb66" "green"        ))
   (teal        '("#33CED8" "#33CCDD" "brightgreen"  ))
   (yellow      '("#EBBF83" "#EEBB88" "yellow"       ))
   (blue        '("#5EC4FF" "#55CCFF" "brightblue"   ))
   (bright-blue '("#539AFC" "#5599FF" "blue"         ))
   (dark-blue   '("#718CA1" "#7788AA" "blue"         ))
   (magenta     '("#E27E8D" "#EE7788" "magenta"      ))
   (violet      '("#B62D65" "#BB2266" "brightmagenta"))
   (cyan        '("#70E1E8" "#77EEEE" "brightcyan"   ))
   (dark-cyan   '("#008B94" "#008899" "cyan"   ))
#+end_src

The easy things first: studying what is already been made.

By looking at the color, we get that:
- =#1D252C= must be our main background.
- =#181E24= is the alternative background; it's a bit darker, useful for the statusbar (more contrast is appreciated there).
- =#A0B3C5=, a cadet blue crayola, should be our foreground.

The color like red, green, cyan... self-explain themselves.
How can we port all those to our scheme?
To do that, we need to know how the base16 template works, what it needs.
That's why I have realized the following table.

| code   | use                                                           |
|--------+---------------------------------------------------------------|
| base00 | main background                                               |
| base01 | alt background  (odd rows, disabled items in context menu...) |
| base02 | background for selected items                                 |
| base03 | never used                                                    |
| base04 | foreground color of disabled items                            |
| base05 | main foreground color                                         |
| base06 | never used                                                    |
| base07 | foreground color for pinned unselected tabs                   |
| base08 | red (used for errors)                                         |
| base09 | never used                                                    |
| base0A | yellow (bg for hints and other items)                         |
| base0B | green (fg for loaded https links)                             |
| base0C | cyan (fg for loaded http links, bg in dl gradient)            |
| base0D | blue (bg in insert mode)                                      |
| base0E | magenta  (fg for URL while there's a warning)                 |
| base0F | never used                                                    |

This give a general idea of how the template works, but you can do a lot better by fine-tuning the single configurations given by qutebrowser (e.g. taking care of contrast between odd and even unselected tabs).

#+name: colorscheme-city-lights
#+begin_src python
base00 = "#1D252C" # black
base01 = "#171D22" # darkened black ++
base02 = "#10151C" # darkened black +++
base03 = "#41505E" # lightened black + (charcoal)
base04 = "#56697A" # lightened black +++
base05 = "#A0B3C5" # (cadet blue crayola)
base06 = "#728CA0" # (light slate gray)
base07 = "#5EC4FF" # blue + (maya blue)
base08 = "#D95468" # red (paradise pink)
base09 = "#D98E48" # orange (persian orange)
base0A = "#EBBF83" # yellow (gold crayola)
base0B = "#8BD49C" # green (celadon)
base0C = "#008B94" # cyan (dark cyan)
base0D = "#539AFC" # blue ++ (cornflower blue)
base0E = "#E27E8D" # magenta + (shimmering blush)
base0F = "#B62D65" # magenta ++ (maroon x 11)
#+end_src

If the porting goes well as I hope, I will consider writing this in yaml and making a contribution to the tinted-color repository. I should generate a palette image for this scheme too. Will do that whenever I'll feel the scheme as complete.

I have to say it's pretty weird that the standard templates doesn't make use of every color. I don't like this limitation, so I'll realize my own template in the next section.
Yeah, this should be probably written as a specific package.

** My base16 template

I will try to make this new template compatible with the previous one.

| code   | use                                                           |
|--------+---------------------------------------------------------------|
| base00 | main background                                               |
| base01 | alt background  (odd rows, disabled items in context menu...) |
| base02 | background for selected items                                 |
| base03 | alt background 2 (bg for selected tabs)                       |
| base04 | foreground color of disabled items                            |
| base05 | main foreground color                                         |
| base06 | fg for unselected tabs                                        |
| base07 | fg for pinned unselected tabs                                 |
| base08 | red                                                           |
| base09 | orange                                                        |
| base0A | yellow                                                        |
| base0B | green                                                         |
| base0C | cyan                                                          |
| base0D | blue (bg in insert mode and caret mode with selection)        |
| base0E | magenta (fg of URL while there's a warning)                   |
| base0F | darker magenta (bg caret mode)                                |

- I prefer a set of blacks for tab backgrounds;
- I use a darker magenta as caret mode background in statusbar;
- Blue fg for completion widget category headers
- Blue fg for matched text in the completion.
- Magenta fg for matched text in the completion for selected item.

#+name: my-base16-template
#+begin_src python
# set qutebrowser colors

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
c.colors.completion.fg = base05

# Background color of the completion widget for odd rows.
c.colors.completion.odd.bg = base01

# Background color of the completion widget for even rows.
c.colors.completion.even.bg = base00

# Foreground color of completion widget category headers.
c.colors.completion.category.fg = base0D

# Background color of the completion widget category headers.
c.colors.completion.category.bg = base00

# Top border color of the completion widget category headers.
c.colors.completion.category.border.top = base00

# Bottom border color of the completion widget category headers.
c.colors.completion.category.border.bottom = base00

# Foreground color of the selected completion item.
c.colors.completion.item.selected.fg = base05

# Background color of the selected completion item.
c.colors.completion.item.selected.bg = base02

# Top border color of the selected completion item.
c.colors.completion.item.selected.border.top = base02

# Bottom border color of the selected completion item.
c.colors.completion.item.selected.border.bottom = base02

# Foreground color of the matched text in the selected completion item.
c.colors.completion.item.selected.match.fg = base0F

# Foreground color of the matched text in the completion.
c.colors.completion.match.fg = base0D

# Color of the scrollbar handle in the completion view.
c.colors.completion.scrollbar.fg = base05

# Color of the scrollbar in the completion view.
c.colors.completion.scrollbar.bg = base00

# Background color of disabled items in the context menu.
c.colors.contextmenu.disabled.bg = base01

# Foreground color of disabled items in the context menu.
c.colors.contextmenu.disabled.fg = base04

# Background color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.bg = base00

# Foreground color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.fg =  base05

# Background color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.bg = base02

#Foreground color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.fg = base05

# Background color for the download bar.
c.colors.downloads.bar.bg = base00

# Color gradient start for download text.
c.colors.downloads.start.fg = base00

# Color gradient start for download backgrounds.
c.colors.downloads.start.bg = base0D

# Color gradient end for download text.
c.colors.downloads.stop.fg = base00

# Color gradient stop for download backgrounds.
c.colors.downloads.stop.bg = base0C

# Foreground color for downloads with errors.
c.colors.downloads.error.fg = base08

# Font color for hints.
c.colors.hints.fg = base00

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
c.colors.hints.bg = base0A

# Font color for the matched part of hints.
c.colors.hints.match.fg = base05

# Text color for the keyhint widget.
c.colors.keyhint.fg = base05

# Highlight color for keys to complete the current keychain.
c.colors.keyhint.suffix.fg = base05

# Background color of the keyhint widget.
c.colors.keyhint.bg = base00

# Foreground color of an error message.
c.colors.messages.error.fg = base00

# Background color of an error message.
c.colors.messages.error.bg = base08

# Border color of an error message.
c.colors.messages.error.border = base08

# Foreground color of a warning message.
c.colors.messages.warning.fg = base00

# Background color of a warning message.
c.colors.messages.warning.bg = base0E

# Border color of a warning message.
c.colors.messages.warning.border = base0E

# Foreground color of an info message.
c.colors.messages.info.fg = base05

# Background color of an info message.
c.colors.messages.info.bg = base00

# Border color of an info message.
c.colors.messages.info.border = base00

# Foreground color for prompts.
c.colors.prompts.fg = base05

# Border used around UI elements in prompts.
c.colors.prompts.border = base00

# Background color for prompts.
c.colors.prompts.bg = base00

# Background color for the selected item in filename prompts.
c.colors.prompts.selected.bg = base02

# Foreground color for the selected item in filename prompts.
c.colors.prompts.selected.fg = base05

# Foreground color of the statusbar.
c.colors.statusbar.normal.fg = base0B

# Background color of the statusbar.
c.colors.statusbar.normal.bg = base00

# Foreground color of the statusbar in insert mode.
c.colors.statusbar.insert.fg = base00

# Background color of the statusbar in insert mode.
c.colors.statusbar.insert.bg = base0D

# Foreground color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.fg = base00

# Background color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.bg = base0C

# Foreground color of the statusbar in private browsing mode.
c.colors.statusbar.private.fg = base00

# Background color of the statusbar in private browsing mode.
c.colors.statusbar.private.bg = base01

# Foreground color of the statusbar in command mode.
c.colors.statusbar.command.fg = base05

# Background color of the statusbar in command mode.
c.colors.statusbar.command.bg = base00

# Foreground color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.fg = base05

# Background color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.bg = base00

# Foreground color of the statusbar in caret mode.
c.colors.statusbar.caret.fg = base00

# Background color of the statusbar in caret mode.
c.colors.statusbar.caret.bg = base0F

# Foreground color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.fg = base00

# Background color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.bg = base0D

# Background color of the progress bar.
c.colors.statusbar.progress.bg = base0D

# Default foreground color of the URL in the statusbar.
c.colors.statusbar.url.fg = base05

# Foreground color of the URL in the statusbar on error.
c.colors.statusbar.url.error.fg = base08

# Foreground color of the URL in the statusbar for hovered links.
c.colors.statusbar.url.hover.fg = base05

# Foreground color of the URL in the statusbar on successful load
# (http).
c.colors.statusbar.url.success.http.fg = base05

# Foreground color of the URL in the statusbar on successful load
# (https).
c.colors.statusbar.url.success.https.fg = base05

# Foreground color of the URL in the statusbar when there's a warning.
c.colors.statusbar.url.warn.fg = base0E

# Background color of the tab bar.
c.colors.tabs.bar.bg = base00

# Color gradient start for the tab indicator.
c.colors.tabs.indicator.start = base0D

# Color gradient end for the tab indicator.
c.colors.tabs.indicator.stop = base0C

# Color for the tab indicator on errors.
c.colors.tabs.indicator.error = base08

# Foreground color of unselected odd tabs.
c.colors.tabs.odd.fg = base05

# Background color of unselected odd tabs.
c.colors.tabs.odd.bg = base02

# Foreground color of unselected even tabs.
c.colors.tabs.even.fg = base05

# Background color of unselected even tabs.
c.colors.tabs.even.bg = base02

# Background color of pinned unselected even tabs.
c.colors.tabs.pinned.even.bg = base02

# Foreground color of pinned unselected even tabs.
c.colors.tabs.pinned.even.fg = base05

# Background color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.bg = base02

# Foreground color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.fg = base05

# Background color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.bg = base03

# Foreground color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.fg = base05

# Background color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.bg = base03

# Foreground color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.fg = base05

# Foreground color of selected odd tabs.
c.colors.tabs.selected.odd.fg = base05

# Background color of selected odd tabs.
c.colors.tabs.selected.odd.bg = base03

# Foreground color of selected even tabs.
c.colors.tabs.selected.even.fg = base05

# Background color of selected even tabs.
c.colors.tabs.selected.even.bg = base03

# Background color for webpages if unset (or empty to use the theme's
# color).
# c.colors.webpage.bg = base00
#+end_src

** TODO Light theme
A light theme would be useful too, but it's not a priority, since this has impact only on small stuff, not on the actual buffer/tab with the text.

* Killing cookie banners
Using this Rust userscript made by [[https://github.com/Schmiddiii][Schmiddiiii]].
As he say in [[https://www.reddit.com/r/qutebrowser/comments/mnptey/comment/gwrtipp/?utm_source=share&utm_medium=web2x&context=3][this Reddit thread]], this userscript

#+begin_quote
has to be called every time you want to block a banner (I dont know if it is possible to call the script when changing the website). The script also aims to reject all cookies instead of hiding the banner, as just hiding it will bring it up again when reloading. *I recommend setting up a key binding.*
#+end_quote

We'll think later about the keybinding; install it first:
- Git clone [[https://github.com/Schmiddiii/qute-cookie-block/][this repo]];
- Execute the =make.sh= in the directory;
- Import a blocklist (compatible with ublock-origin) as =~/.local/qutebrowser/cookie-blockers/blocklist.txt=;
- Done!

This is a nice example because of the implementations itself. Extending qutebrowser functionalities in Rust is interesting for a lot of reasons.
Whatever, now it's time to define the keybinding:

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# scb: spawn cookie block
config.bind('<Space>cb', ':spawn --userscript qute-cookie-block')
#+end_src

A softer alternative was presented by LordOfTheAssClowns [[https://www.reddit.com/r/qutebrowser/comments/mnptey/comment/gu4m9ht/?utm_source=share&utm_medium=web2x&context=3][on the same thread]]:

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# kse: kill sticky elements
config.bind('kse', 'jseval (function () { '+
'  var i, elements = document.querySelectorAll("body *");'+
''+
'  for (i = 0; i < elements.length; i++) {'+
'    var pos = getComputedStyle(elements[i]).position;'+
'    if (pos === "fixed" || pos == "sticky") {'+
'      elements[i].parentNode.removeChild(elements[i]);'+
'    }'+
'  }'+
'})();');
#+end_src

/(Watch out! This block isn't tangled)/

This evaluate this javascript function to shut off floating thingies sticked to your viewport.
Less sofisticated, but looks effective enough.

Potential improvements:
- Most pages block scrolling while showing the banner. This problem must be addressed (simply by tweaking the css);

# * TODO Password manager
# * TODO Adblocker
# * TODO Kaomoji
# * TODO Containers
# * TODO Save as ePub
# * TODO List of tabs
* Tabs
** Hide single tab
Don't show the tabs bar, if there's a single tab opened.

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
c.tabs.show = "multiple"
#+end_src

* Aliases

Close the tab with =:q=.

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
# use `:q` command for killing the tab, not the window
c.aliases['q'] = "tab-close"
#+end_src

You can always close the window with the standard =:qa= (quit all) command.

* Statusbar
** Widgets

#+begin_quote
List of widgets displayed in the statusbar.

Type: [[https://qutebrowser.org/doc/help/settings.html#types][List of StatusbarWidget]]

Valid values:
- url: Current page URL.
- scroll: Percentage of the current page position like 10%.
- scroll_raw: Raw percentage of the current page position like 10.
- history: Display an arrow when possible to go back/forward in history.
- search_match: A match count when searching, e.g. Match [2/10].
- tabs: Current active tab, e.g. 2.
- keypress: Display pressed keys when composing a vi command.
- progress: Progress bar for the current page loading.
- text:foo: Display the static text after the colon, foo in the example.
- clock: Display current time. The format can be changed by adding a format string via clock:.... For supported format strings, see the Python datetime documentation.

Default:
- keypress
- search_match
- url
- scroll
- history
- tabs
- progress
#+end_quote

I appreciate the standard.
Doing nothing here.
