#+title: qutebrowser configuration
#+author: Giovanni Crisalfi
#+hugo_base_dir: ~/zwitterio-it/
#+hugo_section: qute-config
#+STARTUP: show2levels
#+MACRO: more @@html:<!-- more -->@@

* Intro
#+begin_quote
qutebrowser is a keyboard-focused browser with a minimal GUI. It’s based on Python and Qt and free software, licensed under the GPL.
#+end_quote

It's said "cute browser", because it's actually cute, yes, but mostly because that's how Qt itself is pronounced. Go on and enjoy the cuteness.

Wait, but isn't Python /ToO sLoW/ for a browser?

No.

* Globals
[[https://www.qutebrowser.org/doc/help/configuring.html][From the docs]]:

#+begin_quote
For more powerful configuration possibilities, you can create a =config.py= file. Since it’s a Python file, you have much more flexibility for configuration. Note that qutebrowser will never touch this file - this means you’ll be responsible for updating it when upgrading to a newer qutebrowser version.
#+end_quote

Going further in this literate configuration, I will cite the docs a lot more.

#+begin_quote
Two global objects are pre-defined when running =config.py=: c and config.
#+end_quote

So, let's start from them:

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
config = config  # type: ConfigAPI
c = c  # type: ConfigContainer
#+end_src

This isn't enough, because we must tell qutebrowser if we want to load autoconfig or not. If we forgot this, qutebrowser will throw this error:

#+begin_quote
autoconfig loading not specified: Your config.py should call either `config.load_autoconfig()` (to load settings configured via the GUI) or `config.load_autoconfig(False)` (to not do so)
#+end_quote

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
config.load_autoconfig()
#+end_src

#+begin_quote
See the [[https://www.qutebrowser.org/doc/help/settings.html][settings help page]] for all available settings.
#+end_quote

* Keybindings

#+begin_quote
While it’s possible to change the =bindings.commands= setting to customize the keyboard shortcuts, it’s preferred to use the =config.bind= command. Doing so ensures the commands are valid and normalizes different expressions which map to the same key.
#+end_quote

First of all, I want an emacs-like binding to launch commands.

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
config.bind('<Alt-x>', 'set-cmd-text :')
#+end_src

Why using an emacs-like binding with a vi-like configuration, you might say. It's a good question, but the answer is really simple: I'm an Evil Emacs user and I live on the great Doom Emacs distribution, so I'm used to a (IMO) optimal blending of both the styles with some "space spice" on them. Like Spacemacs, Doom Emacs promotes the use of the space key for launching a lot of commands. I will try to emulate this behaviour in this qutebrowser config too.

* Colors

Choosing among the available ones, select the desired colorscheme and template here:

#+begin_src python :noweb no-export :tangle ~/.config/qutebrowser/config.py
<<colorscheme-tokyo-city-dark>>

<<base16-colorscheme-template>>
#+end_src

** base16 Template
This template is taken from a repository meant to work with base16.

#+begin_quote
It provides a simple template that can be used with the base16 color schemes to generate a functional config file for qutebrowser.
#+end_quote

#+name: base16-colorscheme-template
#+begin_src python
# set qutebrowser colors

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
c.colors.completion.fg = base05

# Background color of the completion widget for odd rows.
c.colors.completion.odd.bg = base01

# Background color of the completion widget for even rows.
c.colors.completion.even.bg = base00

# Foreground color of completion widget category headers.
c.colors.completion.category.fg = base0A

# Background color of the completion widget category headers.
c.colors.completion.category.bg = base00

# Top border color of the completion widget category headers.
c.colors.completion.category.border.top = base00

# Bottom border color of the completion widget category headers.
c.colors.completion.category.border.bottom = base00

# Foreground color of the selected completion item.
c.colors.completion.item.selected.fg = base05

# Background color of the selected completion item.
c.colors.completion.item.selected.bg = base02

# Top border color of the selected completion item.
c.colors.completion.item.selected.border.top = base02

# Bottom border color of the selected completion item.
c.colors.completion.item.selected.border.bottom = base02

# Foreground color of the matched text in the selected completion item.
c.colors.completion.item.selected.match.fg = base0B

# Foreground color of the matched text in the completion.
c.colors.completion.match.fg = base0B

# Color of the scrollbar handle in the completion view.
c.colors.completion.scrollbar.fg = base05

# Color of the scrollbar in the completion view.
c.colors.completion.scrollbar.bg = base00

# Background color of disabled items in the context menu.
c.colors.contextmenu.disabled.bg = base01

# Foreground color of disabled items in the context menu.
c.colors.contextmenu.disabled.fg = base04

# Background color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.bg = base00

# Foreground color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.fg =  base05

# Background color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.bg = base02

#Foreground color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.fg = base05

# Background color for the download bar.
c.colors.downloads.bar.bg = base00

# Color gradient start for download text.
c.colors.downloads.start.fg = base00

# Color gradient start for download backgrounds.
c.colors.downloads.start.bg = base0D

# Color gradient end for download text.
c.colors.downloads.stop.fg = base00

# Color gradient stop for download backgrounds.
c.colors.downloads.stop.bg = base0C

# Foreground color for downloads with errors.
c.colors.downloads.error.fg = base08

# Font color for hints.
c.colors.hints.fg = base00

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
c.colors.hints.bg = base0A

# Font color for the matched part of hints.
c.colors.hints.match.fg = base05

# Text color for the keyhint widget.
c.colors.keyhint.fg = base05

# Highlight color for keys to complete the current keychain.
c.colors.keyhint.suffix.fg = base05

# Background color of the keyhint widget.
c.colors.keyhint.bg = base00

# Foreground color of an error message.
c.colors.messages.error.fg = base00

# Background color of an error message.
c.colors.messages.error.bg = base08

# Border color of an error message.
c.colors.messages.error.border = base08

# Foreground color of a warning message.
c.colors.messages.warning.fg = base00

# Background color of a warning message.
c.colors.messages.warning.bg = base0E

# Border color of a warning message.
c.colors.messages.warning.border = base0E

# Foreground color of an info message.
c.colors.messages.info.fg = base05

# Background color of an info message.
c.colors.messages.info.bg = base00

# Border color of an info message.
c.colors.messages.info.border = base00

# Foreground color for prompts.
c.colors.prompts.fg = base05

# Border used around UI elements in prompts.
c.colors.prompts.border = base00

# Background color for prompts.
c.colors.prompts.bg = base00

# Background color for the selected item in filename prompts.
c.colors.prompts.selected.bg = base02

# Foreground color for the selected item in filename prompts.
c.colors.prompts.selected.fg = base05

# Foreground color of the statusbar.
c.colors.statusbar.normal.fg = base0B

# Background color of the statusbar.
c.colors.statusbar.normal.bg = base00

# Foreground color of the statusbar in insert mode.
c.colors.statusbar.insert.fg = base00

# Background color of the statusbar in insert mode.
c.colors.statusbar.insert.bg = base0D

# Foreground color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.fg = base00

# Background color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.bg = base0C

# Foreground color of the statusbar in private browsing mode.
c.colors.statusbar.private.fg = base00

# Background color of the statusbar in private browsing mode.
c.colors.statusbar.private.bg = base01

# Foreground color of the statusbar in command mode.
c.colors.statusbar.command.fg = base05

# Background color of the statusbar in command mode.
c.colors.statusbar.command.bg = base00

# Foreground color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.fg = base05

# Background color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.bg = base00

# Foreground color of the statusbar in caret mode.
c.colors.statusbar.caret.fg = base00

# Background color of the statusbar in caret mode.
c.colors.statusbar.caret.bg = base0E

# Foreground color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.fg = base00

# Background color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.bg = base0D

# Background color of the progress bar.
c.colors.statusbar.progress.bg = base0D

# Default foreground color of the URL in the statusbar.
c.colors.statusbar.url.fg = base05

# Foreground color of the URL in the statusbar on error.
c.colors.statusbar.url.error.fg = base08

# Foreground color of the URL in the statusbar for hovered links.
c.colors.statusbar.url.hover.fg = base05

# Foreground color of the URL in the statusbar on successful load
# (http).
c.colors.statusbar.url.success.http.fg = base0C

# Foreground color of the URL in the statusbar on successful load
# (https).
c.colors.statusbar.url.success.https.fg = base0B

# Foreground color of the URL in the statusbar when there's a warning.
c.colors.statusbar.url.warn.fg = base0E

# Background color of the tab bar.
c.colors.tabs.bar.bg = base00

# Color gradient start for the tab indicator.
c.colors.tabs.indicator.start = base0D

# Color gradient end for the tab indicator.
c.colors.tabs.indicator.stop = base0C

# Color for the tab indicator on errors.
c.colors.tabs.indicator.error = base08

# Foreground color of unselected odd tabs.
c.colors.tabs.odd.fg = base05

# Background color of unselected odd tabs.
c.colors.tabs.odd.bg = base01

# Foreground color of unselected even tabs.
c.colors.tabs.even.fg = base05

# Background color of unselected even tabs.
c.colors.tabs.even.bg = base00

# Background color of pinned unselected even tabs.
c.colors.tabs.pinned.even.bg = base0C

# Foreground color of pinned unselected even tabs.
c.colors.tabs.pinned.even.fg = base07

# Background color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.bg = base0B

# Foreground color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.fg = base07

# Background color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.bg = base02

# Foreground color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.fg = base05

# Background color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.bg = base02

# Foreground color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.fg = base05

# Foreground color of selected odd tabs.
c.colors.tabs.selected.odd.fg = base05

# Background color of selected odd tabs.
c.colors.tabs.selected.odd.bg = base02

# Foreground color of selected even tabs.
c.colors.tabs.selected.even.fg = base05

# Background color of selected even tabs.
c.colors.tabs.selected.even.bg = base02

# Background color for webpages if unset (or empty to use the theme's
# color).
# c.colors.webpage.bg = base00
#+end_src

** Tokyo city dark
#+name: colorscheme-tokyo-city-dark
#+begin_src python
# base16-qutebrowser (https://github.com/theova/base16-qutebrowser)
# Scheme name: Tokyo City Dark
# Scheme author: Michaël Ball
# Template author: theova
# Commentary: Tinted Theming: (https://github.com/tinted-theming)

base00 = "#171d23"
base01 = "#1d252c"
base02 = "#28323a"
base03 = "#526270"
base04 = "#b7c5d3"
base05 = "#d8e2ec"
base06 = "#f6f6f8"
base07 = "#fbfbfd"
base08 = "#f7768e"
base09 = "#ff9e64"
base0A = "#b7c5d3"
base0B = "#9ece6a"
base0C = "#89ddff"
base0D = "#7aa2f7"
base0E = "#bb9af7"
base0F = "#bb9af7"
#+end_src

** City lights (WIP)
This could be easily converted to my present Doom Emacs theme, =doom-city-lights= (a theme inspired by Atom City Lights).

[[https://github.com/SahilKang/emacs-doom-themes/blob/master/themes/doom-city-lights-theme.el][Directly from the source]], we read:

#+begin_src emacs-lisp
;; name        default   256       16
  ((bg         '("#1D252C" nil       nil            ))
   (bg-alt     '("#181E24" nil       nil            ))
   (base0      '("#10151C" "black"   "black"        ))
   (base1      '("#171D22" "#111122" "brightblack"  ))
   (base2      '("#20282F" "#222222" "brightblack"  ))
   (base3      '("#28323B" "#223333" "brightblack"  ))
   (base4      '("#384551" "#334455" "brightblack"  ))
   (base5      '("#56697A" "#556677" "brightblack"  ))
   (base6      '("#688094" "#668899" "brightblack"  ))
   (base7      '("#7FA0B7" "#77AABB" "brightblack"  ))
   (base8      '("#9CAABB" "#99AABB" "white"        ))
   (fg-alt     '("#728CA0" "#7788AA" "brightwhite"  ))
   (fg         '("#A0B3C5" "#AABBCC" "white"        ))

   (grey        '("#41505E" "#ff6655" "red"          ))
   (red         '("#D95468" "#ff6655" "red"          ))
   (orange      '("#D98E48" "#dd8844" "brightred"    ))
   (green       '("#8BD49C" "#99bb66" "green"        ))
   (teal        '("#33CED8" "#33CCDD" "brightgreen"  ))
   (yellow      '("#EBBF83" "#EEBB88" "yellow"       ))
   (blue        '("#5EC4FF" "#55CCFF" "brightblue"   ))
   (bright-blue '("#539AFC" "#5599FF" "blue"         ))
   (dark-blue   '("#718CA1" "#7788AA" "blue"         ))
   (magenta     '("#E27E8D" "#EE7788" "magenta"      ))
   (violet      '("#B62D65" "#BB2266" "brightmagenta"))
   (cyan        '("#70E1E8" "#77EEEE" "brightcyan"   ))
   (dark-cyan   '("#008B94" "#008899" "cyan"   ))
#+end_src

The easy things first. We have:
- 2 backgrounds
- 2 foregrounds
- 8 blackish base colors
- 3 whiteish base colors
- 13 assorted colors

How can we port them to our scheme?
To do that, we have to know how the base16 system works.
This image (from the README in [[https://github.com/chriskempson/base16-shell][this repo]]) seems to offer some explanation.
- base0D is some kind of blue;
- base08 is some kind of red...

#+DOWNLOADED: screenshot @ 2022-12-03 18:41:24
[[file:Colors/2022-12-03_18-41-24_screenshot.png]]

If the porting goes well as I hope, I will consider writing this in yaml and making a contribution to the base16 repository.

#+name: colorscheme-city-lights
#+begin_src python
base00 = "#1D252C" # background color for a lot of stuff
base01 = "#171D22" # background color for statusbar or tabs
base02 = "#20282F" # bg color for selected stuff
base03 = "#28323B" # actually never used; weird
base04 = "#10151C" # foreground color for disabled stuff (it should be darker, grayish)
base05 = "#56697A" # text color, scrollbar, hints... foreground
base06 = "#728CA0" # maybe alt fg? never used;
base07 = "#7FA0B7" # foreground color for tabs
base08 = "#D95468" # red (for error related stuff)
base09 = "#ff9e64" # some kind of primary, maybe, orange here, never used
base0A = "#8BD49C" # yellow (bg for hints, fg for other elements)
base0B = "#8BD49C" # green (fg of statusbar, because it's made to be green)
base0C = "#008B94" # cyan (bg color in some tabs, used in gradients, better a dark version)
base0D = "#718CA1" # blue (bg color in insert mode, better a dark one)
base0E = "#E27E8D" # magenta (bg and border color for warnings, bg color in caret mode)
base0F = "#bb9af7" # another kind of primary; purplish here, never used
#+end_src

I should generate a palette image for this scheme too. Will do that whenever the scheme will be complete.

** TODO Light theme
A light theme would be useful too, but it's not a priority, since this has impact only on small stuff, not on the actual buffer/tab with the text.
